/*******************************************************************************
* osa_timer.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-8-2 Create
*
* Desc: 定义OSA模块对外提供的定时器接口
*       
*           接口调用流程如下:
*           ==========================
*                   |                            
*           OSA_timerCreate
*                   |
*           OSA_timerStart / OSA_timerStop 
*                   |
*           OSA_timerDelete
*           ===========================
* Modification: 
*    Date    :  
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_TIMER_H_
#define _OSA_TIMER_H_

#if defined(__KERNEL__) || defined (___DSPBIOS___)    /* Linux 内核态和TI SYSBIOS支持*/


/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */

/*定时器句柄类型*/
typedef Handle OSA_TimerHandle;

/*定义定时器的回调处理函数类型, 
入参hTimer为定时器句柄
入参pUserArgs为定时器创建时传入的用户参数
返回值Int32表示函数执行成功或失败
*/
typedef Int32 (*OSA_TimerCallBack)(OSA_TimerHandle hTimer, Ptr pUserArgs);


/*定时器类型定义*/
typedef enum
{
    OSA_TIMER_ONCE = 0,    /*Start后只执行一次的定时器*/
    OSA_TIMER_LOOP         /*Start后循环执行的定时器*/
}OSA_TimerType;

/*最短的定时器间隔, 设为20ms, 避免过于频繁地执行定时器, 消耗CPU*/
#define OSA_TIMER_INTV_MIN     20

/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */

/*创建定时器的参数结构体*/
typedef struct
{
    OSA_TimerCallBack userFunc;             /*定时器的回调处理函数*/
    Ptr pUserArgs;                          /*传给回调处理函数的用户参数*/

    Uint32 type;                            /*定时器类型,参见OSA_TimerType定义*/

    /*定时器超时时间,单位为毫秒*/
    /*类型为OSA_TIMER_LOOP的定时器expireMs 表示启动后每隔多少毫秒执行一次回调函数*/
    /*类型为OSA_TIMER_ONCE的定时器expireMs 表示启动后隔多少毫秒执行回调函数*/
    /*对于类型为OSA_TIMER_LOOP的定时器,*/
    /*expireMs必须大于等于OSA_TIMER_INTV_MIN, 以避免用户设得过短，导致CPU过高*/
    /*如果expireMs小于OSA_TIMER_INTV_MIN, 程序将自动设为OSA_TIMER_INTV_MIN*/
    Uint32 expireMs;                        
                                            
    Uint32 reserved[4];                     /*保留*/                                            
}OSA_TimerInitParams;

/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_timerCreate
* 描  述  : 该函数负责创建一个定时器
*           该接口不能在中断上下文调用
*
* 输  入  : - pParams:  创建定时器的参数，参见OSA_TimerInitParams定义
*
* 输  出  : - phTimer:  定时器句柄指针,当创建成功时输出定时器句柄
* 返回值  :  OSA_SOK:   创建成功
*            OSA_EFAIL: 创建失败
*******************************************************************************/
Int32 OSA_timerCreate(OSA_TimerInitParams *pParams, 
                            OSA_TimerHandle *phTimer);

/*******************************************************************************
* 函数名  : OSA_timerStart
* 描  述  : 该函数负责启动一个定时器,成功调用后定时器开始运行，调用时的注意事项:
*           1、该接口可在中断上下文调用
*           2、对于类型为OSA_TIMER_LOOP的定时器，不能在回调函数中调用本接口
*           3、对于类型为OSA_TIMER_ONCE的定时器，可以在回调函数中调用本接口
*
* 输  入  :  - hTimer:  定时器句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   启动成功
*           OSA_EFAIL: 启动失败
*******************************************************************************/
Int32 OSA_timerStart(OSA_TimerHandle hTimer);

/*******************************************************************************
* 函数名  : OSA_timerStop
* 描  述  : 该函数负责停止一个定时器,成功调用后定时器将不再调用回调函数，注意事项:
*           1、不能在中断上下文调用
*           2、不能在定时器回调函数中调用
*
* 输  入  :  - hTimer:  定时器句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   停止成功
*           OSA_EFAIL: 停止失败
*******************************************************************************/
Int32 OSA_timerStop(OSA_TimerHandle hTimer);

/*******************************************************************************
* 函数名  : OSA_timerDelete
* 描  述  : 该函数负责删除一个定时器，注意事项:
*           1、不能在中断上下文调用
*           2、不能在定时器回调函数中调用
*           3、成功调用后，不能再继续访问定时器句柄
*
* 输  入  :  - hTimer:  定时器句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   删除成功
*           OSA_EFAIL: 删除失败
*******************************************************************************/
Int32 OSA_timerDelete(OSA_TimerHandle hTimer);

#ifdef __cplusplus
}
#endif

#endif

#endif  /*  _OSA_TIMER_H_  */

