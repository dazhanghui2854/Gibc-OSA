/*******************************************************************************
* osa_mutex.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-5-23 Create
*
* Desc: 定义OSA模块对外提供的互斥锁接口
*
*           接口调用流程如下:
*           ==========================
*                   |                            
*           OSA_mutexCreate
*                   |
*           OSA_mutexLock/OSA_mutexUnlock
*                   |
*           OSA_mutexDelete
*           ===========================
*           注意:对于类型为OSA_MUTEX_NORMAL的互斥锁，同一线程不能加锁多次
*                对于类型为OSA_MUTEX_RECURSIVE的互斥锁，同一线程可以加锁多次
*
* Modification: 
*    Date    :  
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_MUTEX_H_
#define _OSA_MUTEX_H_


/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */
/* 调用OSA_mutexCreate返回的互斥锁句柄类型,上层模块不需要关心其中的具体内容,*/
/* 只需要在各互斥锁操作接口中传入该句柄即可*/
typedef Handle OSA_MutexHandle;

/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */
/*定义互斥锁的类型*/
typedef enum
{
    OSA_MUTEX_NORMAL = 0,      /*普通锁,不支持递归*/
    OSA_MUTEX_RECURSIVE        /*递归锁,支持递归加锁,即同一线程可以对锁加锁多次*/
}OSA_MutexType;



/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */
/*******************************************************************************
* 函数名  : OSA_mutexCreate
* 描  述  : 该函数负责创建一个互斥锁
*           该接口不能在内核态中断上下文调用
*
* 输  入  : - type:    互斥锁类型,参见OSA_MutexType定义
*
* 输  出  : - phMutex: 互斥锁句柄指针,当创建成功时输出互斥锁句柄
* 返回值  : OSA_SOK:   创建成功
*           OSA_EFAIL: 创建失败
*******************************************************************************/
Int32 OSA_mutexCreate(Uint32 type, OSA_MutexHandle *phMutex);

/*******************************************************************************
* 函数名  : OSA_mutexLock
* 描  述  : 互斥锁加锁
*           该接口不能在内核态中断上下文调用
* 输  入  : - hMutex: 互斥锁句柄,
*
* 输  出  : 无
* 返回值  : OSA_SOK:   成功
*           OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_mutexLock(OSA_MutexHandle hMutex);


/*******************************************************************************
* 函数名  : OSA_mutexTryLock
* 描  述  : 试图对互斥锁进行加锁。该接口目前只支持Linux用户层调用。
*           该接口不能在内核态中断上下文调用
* 输  入  : - hMutex: 互斥锁句柄,
*
* 输  出  : 无
* 返回值  : OSA_SOK:   成功
*           OSA_EBUSY: 锁被占着
*           OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_mutexTryLock(OSA_MutexHandle hMutex);


/*******************************************************************************
* 函数名  : OSA_mutexUnlock
* 描  述  : 互斥锁解锁
*           该接口不能在内核态中断上下文调用
* 输  入  : - hMutex: 互斥锁句柄,
*
* 输  出  : 无
* 返回值  : OSA_SOK:   成功
*           OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_mutexUnlock(OSA_MutexHandle hMutex);

/*******************************************************************************
* 函数名  : OSA_mutexDelete
* 描  述  : 该函数负责销毁一个互斥锁
*           该接口不能在内核态中断上下文调用
*
* 输  入  : - hMutex: 互斥锁句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   成功
*           OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_mutexDelete(OSA_MutexHandle hMutex);

#ifdef __cplusplus
}
#endif

#endif  /*  _OSA_MUTEX_H_  */

