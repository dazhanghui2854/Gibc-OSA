/*******************************************************************************
* osa_msgq.h
* Description: OSA消息队列。
*
*       1. 硬件说明。
*          无。
*
*       2. 程序结构说明。
*          无
*
*       3. 使用说明。
*          无。
*
*       4. 局限性说明。
*          无。
*
*       5. 其他说明。
*          无。
*
* Modification:
*    Date    :
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_MSGQ_H_
#define _OSA_MSGQ_H_

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */

#define OSA_msgGetCmd(msg)         ( (msg)->cmd )
#define OSA_msgGetPrm(msg)         ( (msg)->pPrm )
#define OSA_msgGetAckStatus(msg)   ( (msg)->status )

typedef Handle OSA_MsgqHandle;


/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */

/* 消息 */
typedef struct
{
    Uint16 cmd;
    Uint16 flags;
    Ptr    pPrm;
    Int32  status;
} OSA_MsgqMsg;


/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_msgqCreate
* 描  述  : 创建消息队列。
* 输  入  : - nMsgNum: 队列的消息数量。
*         : - phMsgq : 返回的消息队列句柄，后续所有操作基于此句柄。
* 输  出  : 无。
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_msgqCreate(Uint32 nMsgNum, OSA_MsgqHandle *phMsgq);


/*******************************************************************************
* 函数名  : OSA_msgqDelete
* 描  述  : 销毁消息队列。
* 输  入  : - hMsgq: 消息队列句柄。
* 输  出  : 无。
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_msgqDelete(OSA_MsgqHandle hMsgq);


/*******************************************************************************
* 函数名  : OSA_msgqSend
* 描  述  : 发送消息。
* 输  入  : - hMsgq  : 消息队列句柄。
*           - pMsg   : 消息。
*           - timeout: 超时时间。单位是毫秒。OSA_TIMEOUT_NONE表示不等待，
*                      OSA_TIMEOUT_FOREVER表示无限等待。
* 输  出  : 无。
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_msgqSend(OSA_MsgqHandle hMsgq,
                   OSA_MsgqMsg   *pMsg,
                   Uint32         timeout);


/*******************************************************************************
* 函数名  : OSA_msgqSendMsg
* 描  述  : 发送消息。通过单个形式参数传递消息信息。
* 输  入  : - hMsgqTo  : 接收者的消息队列句柄。
*           - hMsgqFrom: 发送者的消息队列句柄。
*           - cmd      : 命令。
*           - msgFlags : 用户自定义标志。
*           - pPrm     : 消息参数。
*           - ppMsg    : 返回的消息指针，供用户使用。注意是指针的指针。
* 输  出  : 无。
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_msgqSendMsg(OSA_MsgqHandle hMsgqTo,
                      OSA_MsgqHandle hMsgqFrom,
                      Uint16         cmd,
                      Uint16         msgFlags,
                      void          *pPrm,
                      OSA_MsgqMsg  **ppMsg);


/*******************************************************************************
* 函数名  : OSA_msgqRecvMsg
* 描  述  : 接收消息。
* 输  入  : - hMsgq  : 消息队列句柄。
*           - ppMsg  : 消息指针。注意是指针的指针。
*           - timeout: 超时时间。单位是毫秒。OSA_TIMEOUT_NONE表示不等待，
*                      OSA_TIMEOUT_FOREVER表示无限等待。
* 输  出  : 无。
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_msgqRecvMsg(OSA_MsgqHandle hMsgq,
                      OSA_MsgqMsg  **ppMsg,
                      Uint32         timeout);


/*******************************************************************************
* 函数名  : OSA_msgqCheckMsg
* 描  述  : 检查是否有消息。
* 输  入  : - hMsgq: 消息队列句柄。
* 输  出  : 无。
* 返回值  : OSA_TRUE  : 成功。
*           OSA_FALSE : 失败。
*******************************************************************************/
Bool32 OSA_msgqCheckMsg(OSA_MsgqHandle hMsgq);


/*******************************************************************************
* 函数名  : OSA_msgqSendAck
* 描  述  : 发送回复值。
* 输  入  : - hMsgq    : 消息队列句柄。
*           - ackRetVal: 回复值。
* 输  出  : 无。
* 返回值  : OSA_TRUE  : 成功。
*           OSA_FALSE : 失败。
*******************************************************************************/
Int32 OSA_msgqSendAck(OSA_MsgqMsg *pMsg, Int32 ackRetVal);


/*******************************************************************************
* 函数名  : OSA_msgqAllocMsg
* 描  述  : 分配消息内存。
* 输  入  : - ppMsg: 消息指针的指针。
* 输  出  : 无。
* 返回值  : OSA_TRUE  : 成功。
*           OSA_FALSE : 失败。
*******************************************************************************/
Int32 OSA_msgqAllocMsg(OSA_MsgqMsg **ppMsg);


/*******************************************************************************
* 函数名  : OSA_msgqFreeMsg
* 描  述  : 释放已经分配的消息内存。
* 输  入  : - pMsg: 消息指针。
* 输  出  : 无。
* 返回值  : OSA_TRUE  : 成功。
*           OSA_FALSE : 失败。
*******************************************************************************/
Int32 OSA_msgqFreeMsg(OSA_MsgqMsg *pMsg);


/*******************************************************************************
* 函数名  : OSA_msgqFreeList
* 描  述  : 释放消息到队列中。
* 输  入  : - pMsg: 消息指针。
* 输  出  : 无。
* 返回值  : OSA_TRUE  : 成功。
*           OSA_FALSE : 失败。
*******************************************************************************/
Int32 OSA_msgqFreeList(OSA_MsgqMsg *pMsg);

#ifdef __cplusplus
}
#endif

#endif /* _OSA_MSGQ_H_ */


