/*******************************************************************************
* osa_kwait.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-5-23 Create
*
* Desc: 定义linux内核态OSA模块对外提供的等待量接口
*
*           接口调用流程如下:
*           ==========================
*                   |                            
*           OSA_kWaitCreate
*                   |
*           OSA_kWaitPend/OSA_kWaitPendTimeout/OSA_kWaitPendInterruptible/
*           OSA_kWaitPendInterruptibleTimeout/OSA_kWaitDone
*                   |
*           OSA_kWaitDelete
*           ===========================
*
* Modification: 
*    Date    :  
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_KWAIT_H_
#define _OSA_KWAIT_H_

#ifdef __KERNEL__    /* 仅Linux 内核态支持*/


/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif

/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */
/* 调用OSA_kWaitCreate返回的等待量句柄类型,上层模块不需要关心其中的具体内容,*/
/* 只需要在各操作接口中传入该句柄即可 */
typedef Handle OSA_KWaitHandle;

/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */


/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_kWaitCreate
* 描  述  : 该函数负责创建一个等待量
*           该接口不能在中断上下文调用
*
* 输  入  : 无
*
* 输  出  : - phWait:   等待量句柄指针,当创建成功时输出等待量句柄
* 返回值  :  OSA_SOK:   创建成功
*            OSA_EFAIL: 创建失败
*******************************************************************************/
Int32 OSA_kWaitCreate(OSA_KWaitHandle *phWait);

/*******************************************************************************
* 函数名  : OSA_kWaitPend
* 描  述  : 该函数实现等待功能,在等待过程中会睡眠,
*           该接口不能在中断上下文调用
*
* 输  入  : - hWait: 等待量句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   成功
*           OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_kWaitPend(OSA_KWaitHandle hWait);

/*******************************************************************************
* 函数名  : OSA_kWaitDone
* 描  述  : 该函数唤醒等待的进程, 如果有多个进程在等待，则一次性唤醒所有的进程
*           该接口可以在中断上下文调用
*
* 输  入  : - hWait:  等待量句柄
*
* 输  出  : 无。
* 返回值  :  OSA_SOK: 成功
*          OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_kWaitDone(OSA_KWaitHandle hWait);

/*******************************************************************************
* 函数名  : OSA_kWaitDoneSingle
* 描  述  : 该函数唤醒等待的进程, 如果有多个进程在等待，
*           则只唤醒一个最早等待的进程
*           该接口可以在中断上下文调用
*
* 输  入  : - hWait:  等待量句柄
*
* 输  出  : 无。
* 返回值  :  OSA_SOK: 成功
*          OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_kWaitDoneSingle(OSA_KWaitHandle hWait);

/*******************************************************************************
* 函数名  : OSA_kWaitPendTimeout
* 描  述  : 该函数实现带超时的等待功能,在等待过程中会睡眠,
*           该接口不能在中断上下文调用
*
* 输  入  : - hWait:     等待量句柄
*           - timeoutMs: 超时时间,以毫秒为单位,若超时时间到还没有被唤醒,将返回OSA_ETIMEOUT
*
* 输  出  : 无。
* 返回值  :  >= 0:         表示唤醒的时刻,距离设置的超时时间timeoutMs还剩多少毫秒
*            OSA_ETIMEOUT: 表示等待超时
*            OSA_EFAIL:    句柄无效或在中断上下文调用
*******************************************************************************/
Int32 OSA_kWaitPendTimeout(OSA_KWaitHandle hWait, Uint32 timeoutMs);

/*******************************************************************************
* 函数名  : OSA_kWaitPendInterruptible
* 描  述  : 该函数实现可被信号中断的等待功能,在等待过程中会睡眠,
*           该接口不能在中断上下文调用
*
* 输  入  : - hWait: 等待量句柄
*
* 输  出  : 无。
* 返回值  : OSA_EINTR: 表示等待过程中被信号中断
*           OSA_SOK:   没有被信号中断,正常等待且被正常唤醒
*           OSA_EFAIL: 句柄无效或在中断上下文调用
*******************************************************************************/
Int32 OSA_kWaitPendInterruptible(OSA_KWaitHandle hWait);

/*******************************************************************************
* 函数名  : OSA_kWaitPendInterruptibleTimeout
* 描  述  : 该函数为OSA_kWaitPendTimeout和OSA_kWaitPendInterruptible的合并
*           该接口不能在中断上下文调用
*
* 输  入  : - hWait:     等待量句柄
*           - timeoutMs: 超时时间,以毫秒为单位,若超时时间到还没有被唤醒,将返回OSA_ETIMEOUT
*
* 输  出  : 无
* 返回值  :  >= 0:         表示唤醒的时刻,距离设置的超时时间timeoutMs还剩多少毫秒
*            OSA_ETIMEOUT: 表示等待超时
*            OSA_EINTR:    表示等待过程中被信号中断
*            OSA_EFAIL:    句柄无效或在中断上下文调用
*******************************************************************************/
Int32 OSA_kWaitPendInterruptibleTimeout(OSA_KWaitHandle hWait, 
                                        Uint32 timeoutMs);

/*******************************************************************************
* 函数名  : OSA_kWaitDelete
* 描  述  : 该函数负责销毁一个等待量
*           该接口不能在中断上下文调用
*
* 输  入  : - hWait: 要销毁的等待量句柄
*
* 输  出  : 无。
* 返回值  :  OSA_SOK:   成功
*            OSA_EFAIL: 失败
*******************************************************************************/
Int32 OSA_kWaitDelete(OSA_KWaitHandle hWait);
 


#ifdef __cplusplus
}
#endif

#endif

#endif  /*  _OSA_KWAIT_H_  */


