/*******************************************************************************
* osa_irq.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-8-2 Create
*
* Desc: 定义linux内核态OSA模块对外提供的中断接口
*       
*           接口调用流程如下:
*           ==========================
*                   |                            
*           OSA_irqCreate
*                   |
*           OSA_irqStart / OSA_irqStop 
*                   |
*           OSA_irqDelete
*           ===========================
* Modification: 
*    Date    :  
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_IRQ_H_
#define _OSA_IRQ_H_

#if defined(__KERNEL__) || defined (___DSPBIOS___)    /* Linux 内核态和TI SYSBIOS支持*/


/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */

/* 中断句柄类型*/
typedef Handle OSA_IrqHandle;

/* 定义中断的回调处理函数类型, 
 * 入参hIrq为中断句柄
 * 入参pUserArgs为中断创建时传入的用户参数
 * 返回值Int32表示函数执行成功或失败
 */
typedef Int32 (*OSA_IrqCallBack)(OSA_IrqHandle hIrq, Ptr pUserArgs);

/* 中断类型定义，仅对linux内核态有效，对SYS BIOS无效
 * 其中OSA_IRQ_LEVEL_xxx、OSA_IRQ_EDGE_xxx用于向内核注册中断时需要指定触发类型的情况，
 * 可以和OSA_IRQ_SHARE组合起来使用，如OSA_IRQ_LEVEL_HIGH|OSA_IRQ_SHARE
 */
typedef enum
{
    OSA_IRQ_NOSHARE         = 0,           /* 非共享的中断 */
    OSA_IRQ_SHARE           = 0x1,         /* 共享的中断 */
        
    OSA_IRQ_LEVEL_HIGH      = 0x10,        /* 高电平触发的中断 */
    OSA_IRQ_LEVEL_LOW       = 0x20,        /* 低电平触发的中断 */
    OSA_IRQ_EDGE_RISING     = 0x40,        /* 上升沿触发的中断 */
    OSA_IRQ_EDGE_FALLING    = 0x80         /* 下降沿触发的中断 */
    
}OSA_IrqType;

/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */

/* 创建中断的参数结构体 */
typedef struct
{
    OSA_IrqCallBack userFunc;             /* 中断的回调处理函数 */
    Ptr pUserArgs;                        /* 传给回调处理函数的用户参数 */

    Uint32 irq;                           /* 中断号 */

    /*中断名称和中断类型仅linux内核态需要填写，对于SYS_BIOS不需要填*/
    const Char *name;                     /*中断名称*/
    Uint32 type;                          /*中断类型,参见OSA_IrqType定义*/                  

    Uint32 reserved[4];                   /*保留*/                                            
}OSA_IrqInitParams;

/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_irqCreate
* 描  述  : 该函数负责创建一个中断
*           该接口不能在中断上下文调用
*
* 输  入  : - pParams:  创建中断的参数，参见OSA_IrqInitParams定义
*
* 输  出  : - phIrq:  中断句柄指针,当创建成功时输出中断句柄
* 返回值  :  OSA_SOK:   创建成功
*            OSA_EFAIL: 创建失败
*******************************************************************************/
Int32 OSA_irqCreate(OSA_IrqInitParams *pParams, 
                            OSA_IrqHandle *phIrq);

/*******************************************************************************
* 函数名  : OSA_irqStart
* 描  述  : 该函数负责开启中断，调用时的注意事项:
*           1、该接口可以在中断上下文调用
*           2、可以在中断回调函数中调用本接口
*
* 输  入  :  - hIrq:  中断句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   启动成功
*           OSA_EFAIL: 启动失败
*******************************************************************************/
Int32 OSA_irqStart(OSA_IrqHandle hIrq);

/*******************************************************************************
* 函数名  : OSA_irqStop
* 描  述  : 该函数负责停止一个中断,成功调用后中断将被关闭，注意事项:
*           1、该接口可以在中断上下文调用
*           2、可以在中断回调函数中调用本接口
*
* 输  入  :  - hIrq:  中断句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   停止成功
*           OSA_EFAIL: 停止失败
*******************************************************************************/
Int32 OSA_irqStop(OSA_IrqHandle hIrq);

/*******************************************************************************
* 函数名  : OSA_irqDelete
* 描  述  : 该函数负责删除一个中断，注意事项:
*           1、不能在中断上下文调用
*           2、不能在中断回调函数中调用
*           3、成功调用后，不能再继续访问中断句柄
*
* 输  入  :  - hIrq:  中断句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK:   删除成功
*           OSA_EFAIL: 删除失败
*******************************************************************************/
Int32 OSA_irqDelete(OSA_IrqHandle hIrq);

/*******************************************************************************
* 函数名  : OSA_irqStopAll
* 描  述  : 该函数关闭所有的中断
*
* 输  入  : 无
*
* 输  出  : 无
* 返回值  : 无
*******************************************************************************/
void OSA_irqStopAll(void);

/*******************************************************************************
* 函数名  : OSA_irqStartAll
* 描  述  : 该函数开启所有的中断
*
* 输  入  : 无
*
* 输  出  : 无
* 返回值  : 无
*******************************************************************************/
void OSA_irqStartAll(void);

#ifdef __cplusplus
}
#endif

#endif

#endif  /*  _OSA_IRQ_H_  */


