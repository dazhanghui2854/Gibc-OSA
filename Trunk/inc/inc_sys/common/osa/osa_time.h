/*******************************************************************************
* osa_time.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-8-2 Create
*
* Desc: 
*
* Modification: 
*    Date    :  
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/

#ifndef _OSA_TIME_H_
#define _OSA_TIME_H_


/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */

/*
* 描述    : 下列四个宏用于对OSA_getCurTimeInMsec返回的时间值进行比较和计算时间差操作
*           OSA_timeAfter:  当t1 时刻在t2 时刻之后时, 返回OSA_TRUE; 
*                            当t1与t2相等或者t1在t2之前返回OSA_FALSE;
*
*           OSA_timeBefore: 当t1 时刻在t2 时刻之前时, 返回OSA_TRUE; 
*                            当t1与t2相等或者t1在t2之后返回OSA_FALSE;
*
*           OSA_timeEqual:  当t1与t2相等时, 返回OSA_TRUE; 其他情况返回OSA_FALSE
*
*           OSA_timeDelta:  返回t1 与t2时刻之间的差值, 不管哪个时刻在前, 始终返回大于等于0的数值
*
*/
#define OSA_timeAfter(t1, t2) \
    (((Int32)(t1) - (Int32)(t2) > 0) ? OSA_TRUE : OSA_FALSE)

#define OSA_timeBefore(t1, t2) \
    OSA_timeAfter(t2, t1)

#define OSA_timeEqual(t1, t2) \
    (((Int32)(t1) - (Int32)(t2) == 0) ? OSA_TRUE : OSA_FALSE) 

#define OSA_timeDelta(t1, t2) \
    (OSA_timeAfter(t1, t2) ? \
    ((Int32)(t1) - (Int32)(t2)) : ((Int32)(t2) - (Int32)(t1)))

/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */

/* 时间表述结构体 */
typedef struct
{
    Int32 tvSec;     /* 秒 */
    Int32 tvUsec;    /* 微秒 */
} OSA_TimeVal;

/* 时间表述结构体 */
typedef struct
{
    Int64 tvSec;     /* 秒 */
    Int64 tvUsec;    /* 微秒 */
} OSA_TimeVal64;


typedef struct 
{
    /*获取jiffies时间函数*/
    Uint64 (* OpGetTimeOfJiffies)(void);
	
    /*获取utc时间函数*/
    Int32 (* OpGetTimeOfDay)(OSA_TimeVal *pUtcTime);

	/*获取utc时间函数*/
    Int32 (* OpGetTimeOfDay64)(OSA_TimeVal64 *pUtcTime);
	
	/*预留*/
	Int32 reserved[5];
    
}OSA_MctsRegisterFun;


/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_getTimeOfDay
* 描  述  : 获取当前时间。
*
* 输  入  : - pTimeVal: 时间表述结构，由秒和微妙组成。
*
* 输  出  : 无
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_getTimeOfDay(OSA_TimeVal *pTimeVal);

/*******************************************************************************
* 函数名  : OSA_getTimeOfDay64
* 描  述  : 获取当前时间。
*
* 输  入  : - pTimeVal: 时间表述结构，由秒和微妙组成。
*
* 输  出  : 无
* 返回值  : OSA_SOK  : 成功。
*           OSA_EFAIL: 失败。
*******************************************************************************/
Int32 OSA_getTimeOfDay64(OSA_TimeVal64 *pTimeVal);


/*******************************************************************************
* 函数名  : OSA_getTimeOfJiffies
* 描  述  : 获取系统单调递增的时间。
* 输  入  : 无。
* 输  出  : 无。
* 返回值  : 时间值，单位是毫秒。
*******************************************************************************/
Uint64 OSA_getTimeOfJiffies(void);


/*******************************************************************************
* 函数名  : OSA_getCurTimeInMsec
* 描  述  : 获取当前时刻的毫秒数, 使用时请注意:
*           
*           1. 该函数返回的时间值建议使用OSA_timeAfter、OSA_timeBefore、
*              OSA_timeEqual这三个宏进行比较
*
*           2. 该函数返回的时间值建议使用OSA_timeDelta宏计算两个时间点的差值
*
* 输  入  : 无
*
* 输  出  : 无
* 返回值  : 当前系统毫秒数
*******************************************************************************/
Uint32 OSA_getCurTimeInMsec(void);


/*******************************************************************************
* 函数名  : OSA_msleep
* 描  述  : 毫秒级延时,延时过程中会休眠
*
* 输  入  : - ms: 毫秒数
*
* 输  出  : 无
* 返回值  : 无
*******************************************************************************/
void   OSA_msleep(Uint32 ms);

/******************************************************************************* 
*  函数名: OSA_registerMcts
*  描   述   :注册时间同步模块的获取时间函数
*  输   入   : 
*  输   出   : 
*  返回值: OSA_SOK: 成功。
*                      OSA_EFAIL: 失败。
*******************************************************************************/ 
Int32 OSA_registerMcts(OSA_MctsRegisterFun *pFun);


#if defined(__KERNEL__) || defined(___DSPBIOS___) /* 仅Linux 内核态和SYSBIOS支持*/

/*******************************************************************************
* 函数名  : OSA_mdelay
* 描  述  : 毫秒级延时,延时过程中不休眠忙等
*
* 输  入  : - ms: 毫秒数
*
* 输  出  : 无
* 返回值  : 无
*******************************************************************************/
void   OSA_mdelay(Uint32 ms);


/*******************************************************************************
* 函数名  : OSA_udelay
* 描  述  : 微秒级延时,延时过程中不休眠忙等
*
* 输  入  : - us: 微秒数
*
* 输  出  : 无
* 返回值  : 无
*******************************************************************************/
void   OSA_udelay(Uint32 us);


/*******************************************************************************
* 函数名  : OSA_getOsTicks
* 描  述  : 获取系统滴答数
*
* 输  入  : - 无
*
* 输  出  : 无
* 返回值  : 内核jiffies值
*******************************************************************************/
Uint32 OSA_getOsTicks(void);


/* Tick到毫秒的转换 */
Uint32 OSA_tickToMsec(Uint32 tick);

/* 毫秒到Tick的转换 */
Uint32 OSA_msecToTick(Uint32 ms);

#endif


#ifdef __cplusplus
}
#endif

#endif /*_OSA_TIME_H_*/


