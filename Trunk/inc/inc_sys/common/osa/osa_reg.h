/*******************************************************************************
* osa_reg.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-5-23 Create
*
* Desc: 定义OSA模块对外提供的:
*       1.寄存器读写接口
*       2.寄存器映射接口
*       
*       推荐外部模块使用寄存器映射接口来访问寄存器，这样效率较高。具体步骤如下:
*           ==========================
*                   |                            
*           调用OSA_regRemap建立映射，获取起始虚拟地址
*                   |
*           通过虚拟地址+偏移量直接读写寄存器
*                   |
*           调用OSA_regUnmap取消映射
*           ===========================
*
* Modification: 
*    Date    :  
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_REG_H_
#define _OSA_REG_H_

#if defined(__KERNEL__) || defined (___DSPBIOS___)    /* Linux 内核态和TI SYSBIOS支持*/

/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */


/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */


/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_regRead32
* 描  述  : 读取单个寄存器的值,长度为4字节
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 寄存器的物理地址
*
* 输  出  : 无  
* 返回值  : 寄存器的值
*******************************************************************************/
Uint32 OSA_regRead32(Uint32L regPhyAddr);

/*******************************************************************************
* 函数名  : OSA_regMultiRead32
* 描  述  : 读取多个长度为4字节的寄存器值
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr:  起始寄存器的物理地址
*           - count:       要读取的寄存器个数
* 
* 输  出  : - pRegValues:  寄存器值数组, 内存由调用者分配, 且必须保证长度>= count*4
* 返回值  :  OSA_SOK:      成功
*            OSA_EFAIL:    失败
*******************************************************************************/
Int32 OSA_regMultiRead32(Uint32L regPhyAddr, Uint32 count, 
                             Uint32 *pRegValues);


/*******************************************************************************
* 函数名  : OSA_regRead16
* 描  述  : 读取单个寄存器的值,长度为2字节
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 寄存器的物理地址
*
* 输  出  : 无
* 返回值  : 寄存器的值
*******************************************************************************/
Uint16 OSA_regRead16(Uint32L regPhyAddr);

/*******************************************************************************
* 函数名  : OSA_regMultiRead16
* 描  述  : 读取多个长度为2字节的寄存器值
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 起始寄存器的物理地址
*           - count:      要读取的寄存器个数
* 
* 输  出  : - pRegValues: 寄存器值数组, 内存由调用者分配, 且必须保证长度>= count*2
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regMultiRead16(Uint32L regPhyAddr, Uint32 count, 
                             Uint16 *pRegValues);


/*******************************************************************************
* 函数名  : OSA_regRead8
* 描  述  : 读取单个寄存器的值,长度为1字节
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 寄存器的物理地址
*
* 输  出  : 无
* 返回值  : 寄存器的值
*******************************************************************************/
Uint8 OSA_regRead8(Uint32L regPhyAddr);

/*******************************************************************************
* 函数名  : OSA_regMultiRead8
* 描  述  : 读取多个长度为1字节的寄存器值
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr:  起始寄存器的物理地址
*           - count:       要读取的寄存器个数
* 
* 输  出  : - pRegValues:  寄存器值数组, 内存由调用者分配, 且必须保证长度>= count
* 返回值  :  OSA_SOK:      成功
*            OSA_EFAIL:    失败
*******************************************************************************/
Int32 OSA_regMultiRead8(Uint32L regPhyAddr, Uint32 count, Uint8 *pRegValues);

/*******************************************************************************
* 函数名  : OSA_regWrite32
* 描  述  : 写单个寄存器的值,长度为4字节
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 寄存器的物理地址
*           - regValue:   寄存器的值
* 输  出  : 无
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regWrite32(Uint32L regPhyAddr, Uint32 regValue);

/*******************************************************************************
* 函数名  : OSA_regMultiWrite32
* 描  述  : 写多个长度为4字节的寄存器值
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 起始寄存器的物理地址
*           - count:      要写入的寄存器个数
*           - pRegValues: 寄存器值数组, 内存由调用者分配, 且必须保证长度>= count*4
* 输  出  : 无
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regMultiWrite32(Uint32L regPhyAddr, Uint32 count, 
                              Uint32 *pRegValues);


/*******************************************************************************
* 函数名  : OSA_regWrite16
* 描  述  : 写寄存器的值,长度为2字节
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 寄存器的物理地址
*
* 输  出  : - regValue:   寄存器的值
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regWrite16(Uint32L regPhyAddr, Uint16 regValue);

/*******************************************************************************
* 函数名  : OSA_regMultiWrite16
* 描  述  : 写多个长度为2字节的寄存器值
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 起始寄存器的物理地址
*           - count:      要写入的寄存器个数
*           - pRegValues: 寄存器值数组, 内存由调用者分配, 且必须保证长度>= count*2
* 输  出  : 无
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regMultiWrite16(Uint32L regPhyAddr, Uint32 count, 
                              Uint16 *pRegValues);

/*******************************************************************************
* 函数名  : OSA_regWrite8
* 描  述  : 写寄存器的值,长度为1字节
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 寄存器的物理地址
*
* 输  出  : - regValue:   寄存器的值
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regWrite8(Uint32L regPhyAddr, Uint8 regValue);

/*******************************************************************************
* 函数名  : OSA_regMultiWrite8
* 描  述  : 写多个长度为1字节的寄存器值
*           该接口可以在中断上下文调用
*
* 输  入  : - regPhyAddr: 起始寄存器的物理地址
*           - count:      要写入的寄存器个数
*           - pRegValues: 寄存器值数组, 内存由调用者分配, 且必须保证长度>= count
* 输  出  : 无
* 返回值  :  OSA_SOK:     成功
*            OSA_EFAIL:   失败
*******************************************************************************/
Int32 OSA_regMultiWrite8(Uint32L regPhyAddr, Uint32 count, 
                             Uint8 *pRegValues);

/*******************************************************************************
* 函数名  : OSA_regRemap
* 描  述  : 该接口用于映射一片连续的寄存器地址空间，调用该接口得到起始虚拟地址，
*           后续可以用该起始虚拟地址+偏移量，直接读写寄存器
*           
*
* 输  入  : - basePhyAddr: 起始物理地址
*           - size:        要映射的空间长度
*
* 输  出  :
* 返回值  : 非NULL: 起始虚拟地址
*           NULL: 映射失败
*******************************************************************************/
Ptr OSA_regRemap(Uint32L basePhyAddr, Uint32 size);

/*******************************************************************************
* 函数名  : OSA_regUnmap
* 描  述  : 该接口用于取消OSA_regRemap建立的映射
*           
*
* 输  入  : - pBaseVirtAddr: 起始虚拟地址
*
* 输  出  :
* 返回值  : 无
*******************************************************************************/
void OSA_regUnmap(Ptr pBaseVirtAddr);

/*******************************************************************************
* 函数名  : OSA_regRemapCached
* 描  述  : 该接口用于映射一片连续的寄存器地址空间，调用该接口得到起始虚拟地址，
*           后续可以用该起始虚拟地址+偏移量，带cache功能读写寄存器
*           
*
* 输  入  : - basePhyAddr: 起始物理地址
*           - size:        要映射的空间长度
*
* 输  出  :
* 返回值  : 非NULL: 起始虚拟地址
*           NULL: 映射失败
*******************************************************************************/
Ptr OSA_regRemapCached(Uint32L basePhyAddr, Uint32 size);

#ifdef __cplusplus
}
#endif

#endif

#endif  /*  _OSA_REG_H_  */


