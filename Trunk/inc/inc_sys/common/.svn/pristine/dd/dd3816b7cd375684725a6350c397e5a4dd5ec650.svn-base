/*******************************************************************************
* osa_kcdev.h
*
* Copyright (C) 2011-2013 ZheJiang Dahua Technology CO.,LTD.
*
* Author : Zheng wei <zheng_wei@dahuatech.com>
* Version: V1.0.0  2012-5-23 Create
*
* Desc: 定义linux内核态OSA模块对外提供的字符设备接口
*
*           接口调用流程如下:
*           ==========================
*                   |
*           OSA_kCdevCreate
*                   |
*           各种字符设备的方法回调函数中调用OSA_kCdevGetUserData获取用户数据
*                   |
*           字符设备的poll方法回调函数中调用OSA_kCdevPollWait告诉内核要挂起的等待量
*                   |
*           OSA_kCdevDelete
*           ===========================
*
* Modification:
*    Date    :
*    Revision:
*    Author  :
*    Contents:
*******************************************************************************/


#ifndef _OSA_KCDEV_H_
#define _OSA_KCDEV_H_

#ifdef __KERNEL__    /* 仅Linux 内核态支持*/

/* ========================================================================== */
/*                             头文件区                                       */
/* ========================================================================== */

#ifdef __cplusplus
extern "C" {
#endif


/* ========================================================================== */
/*                           宏和类型定义区                                   */
/* ========================================================================== */
/*字符设备句柄类型,上层模块不需要关心其中的具体内容,*/
/*只需要在调用各操作接口时把句柄传入即可*/
typedef Handle OSA_KCdevHandle;

/*字符设备Poll返回的状态*/
typedef enum
{
    OSA_KCDEVPOLL_PENDING = 0,  /*当前没有任何事件，不可读也不可写*/
    OSA_KCDEVPOLL_RD,           /*可读*/
    OSA_KCDEVPOLL_WR,           /*可写*/
    OSA_KCDEVPOLL_RDWR          /*既可读又可写*/
}OSA_KCdevPollState;

/* ========================================================================== */
/*                          数据结构定义区                                    */
/* ========================================================================== */

/*字符设备pre_mmap方法的输入参数结构体*/
typedef struct
{
    Uint32L vmStart;   /* 要映射的起始虚拟地址*/
    Uint32L size;      /* 要映射的长度*/
    Uint32L vmPgoff;   /* 要映射的起始物理地址页框号*/
    Uint32L phyAddr;   /* 要映射的起始物理地址 */

    Uint32 reserved[4];
}OSA_KCdevPreMmapInParams;


/*字符设备pre_mmap方法的输出参数结构体*/
typedef struct
{
    /*是否执行映射, 该参数在调用pre_mmap接口前默认为OSA_TRUE,
    上层驱动模块可以在pre_mmap接口中根据实际情况对该值进行修改*/
    Bool32 isDoMmap;

    /*真正映射的起始物理地址页框号,
     该参数在调用pre_mmap接口前默认为OSA_KCdevPreMmapInParams中的vm_pgoff
      ，上层驱动模块可以在pre_mmap接口中根据实际情况对该值进行修改*/
    Uint32L vmPgoff;


    /*是否开启Cache, 该参数在调用pre_mmap接口前默认为OSA_TRUE
      ，上层驱动模块可以在pre_mmap接口中根据实际情况对该值进行修改*/
    Bool32 isCached;

    Uint32 reserved[5];
}OSA_KCdevPreMmapOutParams;

/*字符设备操作方法结构体*/
typedef struct
{
    /*******************************************************************************
    * 描  述  :  OSA 字符设备打开接口
    * 输  入  : - hCdev:     字符设备句柄
    *                        该接口实现时可通过该入参获取字符设备句柄
    * 输  出  : 无
    * 返回值  : OSA_EFAIL:   失败
    *           OSA_SOK:     成功
    *******************************************************************************/
    Int32 (*OpOpen)(OSA_KCdevHandle hCdev);

    /*******************************************************************************
    * 描  述  :  OSA 字符设备释放接口
    * 输  入  : - hCdev:     字符设备句柄
    *                        该接口实现时可通过该入参获取字符设备句柄
    * 输  出  : 无
    * 返回值  : OSA_EFAIL:   失败
    *           OSA_SOK:     成功
    *******************************************************************************/
    Int32 (*OpRelease)(OSA_KCdevHandle hCdev);

    /*******************************************************************************
    * 描  述  :  OSA 字符设备ioctl接口
    * 输  入  : - hCdev:     字符设备句柄
    *           - cmd:       ioctl命令
    *           - arg:       ioctl参数
    *
    * 输  出  : 无
    * 返回值  : OSA_EFAIL:   失败
    *           OSA_SOK:     成功
    *******************************************************************************/
   Int32 (*OpIoctl)(OSA_KCdevHandle hCdev, Uint32 cmd, Uint32L arg);


    /*******************************************************************************
    * 描  述  :  OSA 字符设备读接口
    * 输  入  : - hCdev:     字符设备句柄
    *           - size:      要读取的长度
    *           - pOffset:   读写的偏移位置指针，类似于文件读写的offset
    *                        作为入参，提供要读取的位置，上层驱动可根据该参数进行处理
    *                        作为出参，保存读取后的位置，上层驱动可根据实际需要对该参数进行更新
    *
    * 输  出  : - pBuf:      读取的Buffer,该接口实现时需要调用OSA_memCopyToUser把要读取的内容拷贝
    *                        到pBuf中
    * 返回值  : OSA_EFAIL:   读取失败
    *           >=0:         返回读取的字节数
    *******************************************************************************/
    Int32 (*OpRead)(OSA_KCdevHandle hCdev, Char *pBuf, Uint32 size,
                    Int64 *pOffset);

    /*******************************************************************************
    * 描  述  :  OSA 字符设备写接口
    * 输  入  : - hCdev:     字符设备句柄
    *           - pBuf:      写入的Buffer,该接口实现时需要调用OSA_memCopyFromUser把要写入的内容从
    *                        pBuf中拷贝到内核缓冲
    *           - size:      要写入的长度
    *           - pOffset:   读写的偏移位置指针，类似于文件读写的offset
    *                        作为入参，提供要写入的位置，上层驱动可根据该参数进行处理
    *                        作为出参，保存写入后的位置，上层驱动可根据实际需要对该参数进行更新
    *
    * 输  出  : 无
    * 返回值  : OSA_EFAIL:   写入失败
    *           >=0:         返回写入的字节数
    *******************************************************************************/
    Int32 (*OpWrite)(OSA_KCdevHandle hCdev, Char *pBuf, Uint32 size,
                     Int64 *pOffset);

    /*******************************************************************************
    * 描  述  :  OSA 字符设备poll接口
    *            该接口实现时需要调用OSA_kCdevPollWait函数通知内核要挂起的等待量
    *            参见OSA_kCdevPollWait定义
    *
    * 输  入  : - hCdev:     字符设备句柄
    *
    * 输  出  : - pState:    字符设备poll返回的状态，参见OSA_KCdevPollState定义
    *                        该接口实现时需要把poll的状态通过pState输出
    * 返回值  : OSA_EFAIL:   poll失败
    *           OSA_SOK:     poll成功
    *******************************************************************************/
    Int32 (*OpPoll)(OSA_KCdevHandle hCdev, Uint32 *pState);

    /*******************************************************************************
    * 描  述  :  OSA 字符设备pre_mmap接口
    *            该接口的作用在于把linux内核调用mmap时的一些参数(包括要映射的起始虚拟地址、
    *            要映射的长度、要映射的起始物理地址等)传给上层驱动模块,
    *            由上层驱动模块输出是否要进行映射、真正映射的起始物理地址、是否开启Cache等参数
    *            该接口的被调用时机为内核字符设备驱动的mmap方法入口
    *            任何需要支持mmap的驱动，必须实现该接口，若该接口为NULL，将不进行内存映射
    *
    *
    * 输  入  : - hCdev:     字符设备句柄
    *           - pInParams: 输入参数，参见OSA_KCdevPreMmapInParams定义
    *
    * 输  出  : - pOutParams: 输出参数，参见OSA_KCdevPreMmapOutParams定义
    *
    * 返回值  : OSA_EFAIL:   pre_mmap失败, 若返回OSA_EFAIL，则将不进行内存映射
    *           OSA_SOK:     pre_mmap成功
    *******************************************************************************/
    Int32 (*OpPreMmap)(OSA_KCdevHandle hCdev,
                       OSA_KCdevPreMmapInParams *pInParams,
                       OSA_KCdevPreMmapOutParams *pOutParams);


    /*******************************************************************************
    * 描  述  :  字符设备的leek函数
    * 输  入  : - hCdev:     字符设备句柄
    *           - offset:    设备需要偏移到的地址
    *           - cmd:       暂时保留 未使用
    *
    * 返回值  :  >=0:         返回读取的字节数
	*            OSA_EFAIL    返回错误
    *******************************************************************************/
    Int32 (*OpLleek)(OSA_KCdevHandle hCdev, Uint32 offset, Int32 cmd);

	/*******************************************************************************
    * 描  述  :  OSA 字符设备compat ioctl接口, 用于64位系统兼容32位应用程序的ioctl
    * 输  入  : - hCdev:     字符设备句柄
    *           - cmd:       ioctl命令
    *           - arg:       ioctl参数
    *
    * 输  出  : 无
    * 返回值  : OSA_EFAIL:   失败
    *           OSA_SOK:     成功
    *******************************************************************************/
    Int32 (*OpCompatIoctl)(OSA_KCdevHandle hCdev, Uint32 cmd, Uint32L arg);

    Uint32 reserved[3];
} OSA_KCdevOps;

/*字符设备创建的参数结构体*/
typedef struct
{
    const Char   *pName;      /*字符设备名称*/
    Uint32        major;      /*主设备号, 若主设备号和次设备号都为0,将自动分配设备号*/
    Uint32        minor;      /*次设备号*/
    OSA_KCdevOps *pFops;      /*字符设备操作方法指针*/
    Ptr           pUserData;  /*上层模块可以通过该参数保存自己模块的私有数据*/
} OSA_KCdevInitParams;


/* ========================================================================== */
/*                          函数声明区                                        */
/* ========================================================================== */

/*******************************************************************************
* 函数名  : OSA_kCdevCreate
* 描  述  : 该函数负责创建一个字符设备
*           该函数不能在中断上下文调用
*
* 输  入  : - pParams: 字符设备创建的参数,参见OSA_KCdevInitParams定义
*
* 输  出  : - phCdev:  字符设备句柄指针,当创建成功时输出字符设备句柄
* 返回值  : OSA_SOK:   创建成功
*           OSA_EFAIL: 创建失败
*******************************************************************************/
Int32 OSA_kCdevCreate(OSA_KCdevInitParams *pParams,
                      OSA_KCdevHandle *phCdev);

/*******************************************************************************
* 函数名  : OSA_kCdevDelete
* 描  述  : 该函数负责销毁一个字符设备
*           该函数不能在中断上下文调用
*
* 输  入  : -hCdev : 字符设备句柄
*
* 输  出  : 无。
* 返回值  : OSA_SOK : 销毁成功
*                   : OSA_EFAIL : 销毁失败
*******************************************************************************/
Int32 OSA_kCdevDelete(OSA_KCdevHandle hCdev);

/*******************************************************************************
* 函数名  : OSA_kCdevGetUserData
* 描  述  : 该函数负责获取上层模块在该字符设备创建时保存的私有数据
*           该函数可以在中断上下文调用
* 输  入  : - hCdev:     字符设备句柄
*
* 输  出  : - pUserData: 私有数据指针
* 返回值  : OSA_SOK:     获取成功
*           OSA_EFAIL:   获取失败
*******************************************************************************/
Int32 OSA_kCdevGetUserData(OSA_KCdevHandle hCdev, Ptr *pUserData);

/*******************************************************************************
* 函数名  : OSA_kCdevPollWait
* 描  述  : 该函数负责将调用者提供的等待量告诉内核,便于内核挂起在该等待量上
*           通常在字符设备的poll方法里被调用
*
*           该函数不能在中断上下文调用
* 输  入  : - hCdev:     字符设备句柄
*           - hWait:     要挂起的等待量句柄
*
* 输  出  : 无
* 返回值  : OSA_SOK:     正常挂起，且从挂起的状态返回
*           OSA_EFAIL:   挂起失败
*******************************************************************************/
Int32 OSA_kCdevPollWait(OSA_KCdevHandle hCdev, OSA_KWaitHandle hWait);

/*******************************************************************************
 * 函数名  : OSA_kCdevGetMajor
 * 描  述  : 该函数负责获取已经创建的字符设备句柄的主设备号
 *           该函数可以在中断上下文调用
 *
 * 输  入  : - hCdev: 字符设备句柄指针
 *
 * 输  出  : - pMajor : 主设备号
 * 返回值  : OSA_SOK:   创建成功
 *           OSA_EFAIL: 创建失败
 *******************************************************************************/
Int32 OSA_kCdevGetMajor(OSA_KCdevHandle hCdev, Uint32 *pMajor);

/*******************************************************************************
 * 函数名  : OSA_kCdevGetMinor
 * 描  述  : 该函数负责获取已经创建的字符设备句柄的次设备号
 *           该函数可以在中断上下文调用
 *
 * 输  入  : - hCdev: 字符设备句柄指针
 *
 * 输  出  : - pMinor : 次设备号
 * 返回值  : OSA_SOK:   创建成功
 *           OSA_EFAIL: 创建失败
 *******************************************************************************/
Int32 OSA_kCdevGetMinor(OSA_KCdevHandle hCdev, Uint32 *pMinor);


/*******************************************************************************
* 函数名  : OSA_kCdevSetPrivData
* 描  述  : 该函数负责设置当前打开设备文件句柄的私有数据
*           该函数可以在中断上下文调用
* 输  入  : - hCdev:     字符设备句柄
*           - pPrivData: 私有数据指针
* 输  出  : 无
* 返回值  : OSA_SOK:     获取成功
*           OSA_EFAIL:   获取失败
*******************************************************************************/
Int32 OSA_kCdevSetPrivData(OSA_KCdevHandle hCdev, Ptr pPrivData);


/*******************************************************************************
* 函数名  : OSA_kCdevGetPrivData
* 描  述  : 该函数负责获取当前打开设备文件句柄的私有数据
*           该函数可以在中断上下文调用
* 输  入  : - hCdev:     字符设备句柄
*
* 输  出  : - pPrivData: 私有数据指针
* 返回值  : OSA_SOK:     获取成功
*           OSA_EFAIL:   获取失败
*******************************************************************************/
Int32 OSA_kCdevGetPrivData(OSA_KCdevHandle hCdev, Ptr *pPrivData);


#ifdef __cplusplus
}
#endif

#endif

#endif  /*  _OSA_KCDEV_H_  */


